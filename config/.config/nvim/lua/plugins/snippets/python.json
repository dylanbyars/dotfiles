{
  "prism-api logger": {
    "prefix": "log",
    "body": [
      "from flask import current_app as app",
      "\n",
      "app.logger.info($1)"
    ],
    "description": "flask logger import + statement"
  },
  "New function": {
    "prefix": "def",
    "body": "def ${1:fname}(${2:arg}):\n\t${3:pass}$0",
    "description": "function definition."
  },
  "if": {
    "prefix": "if",
    "body": "if ${1:condition}:\n\t${2:pass}$0",
    "description": "if statement."
  },
  "if/else": {
    "prefix": "ifelse",
    "body": [
      "if ${1:condition}:",
      "\t${2:pass}",
      "else:",
      "\t${3:pass}"
    ],
    "description": "an if statement with else"
  },
  "elif": {
    "prefix": "elif",
    "body": [
      "elif ${1:expression}:",
      "\t${2:pass}"
    ],
    "description": "an elif"
  },
  "else": {
    "prefix": "else",
    "body": [
      "else:",
      "\t${1:pass}"
    ],
    "description": "an else"
  },
  "for": {
    "prefix": "for",
    "body": "for ${1:value} in ${2:iterable}:\n\t${3:pass}$0",
    "description": "create a for loop structure."
  },
  "for/else": {
    "prefix": "for/else",
    "body": [
      "for ${1:target_list} in ${2:expression_list}:",
      "\t${3:pass}",
      "else:",
      "\t${4:pass}"
    ],
    "description": "a for loop with else"
  },
  "while": {
    "prefix": "while",
    "body": "while ${1:condition}:\n\t${2:pass}$0",
    "description": "Code snippet to create a while loop structure."
  },
  "while/else": {
    "prefix": "while/else",
    "body": [
      "while ${1:expression}:",
      "\t${2:pass}",
      "else:",
      "\t${3:pass}"
    ],
    "description": "a while loop with else"
  },
  "try:except:": {
    "prefix": "try",
    "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}$0",
    "description": "a try and except blocks."
  },
  "try:except:else:finally": {
    "prefix": "tryef",
    "body": "try:\n\t${1:pass}\nexcept${2: ${3:Exception} as ${4:e}}:\n\t${5:raise}\nelse:\n\t${6:pass}\nfinally:\n\t${7:pass}$0",
    "description": "a try/except/finally with else statement."
  },
  "try:except:else": {
    "prefix": "trye",
    "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nelse:\n\t${5:pass}$0",
    "description": "a try/except with else statement."
  },
  "try:except:finally": {
    "prefix": "tryf",
    "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nfinally:\n\t${5:pass}$0",
    "description": "a try/except/finally."
  },
  "with": {
    "prefix": "with",
    "body": [
      "with ${1:expression} as ${2:target}:",
      "\t${3:pass}"
    ],
    "description": "a with statement"
  },
  "List comprehension": {
    "prefix": "lc",
    "body": "[${1:value} for ${2:value} in ${3:iterable}]$0",
    "description": "List comprehension for creating a list based on existing lists."
  },
  "List comprehension if else": {
    "prefix": "lcie",
    "body": "[${1:value} if ${2:condition} else ${3:condition} for ${4:value} in ${5:iterable}]$0",
    "description": "List comprehension for creating a list based on existing lists, with conditional if-else statement."
  },
  "List comprehension if filter": {
    "prefix": "lci",
    "body": "[${1:value} for ${2:value} in ${3:iterable} if ${4:condition}$0]",
    "description": "List comprehension for creating a list based on existing lists, with conditional if statement."
  },
  "Dictionary comprehension": {
    "prefix": "dc",
    "body": "{${1:key}: ${2:value} for ${3:key}, ${4:value} in ${5:iterable}}$0",
    "description": "Handy and faster way to create dictories based on existing dictionaries."
  },
  "Dictionary comprehension if filter": {
    "prefix": "dci",
    "body": "{${1:key}: ${2:value} for ${3:key}, ${4:value} in ${5:iterable} if ${6:condition}}$0",
    "description": "Handy and faster way to create dictories based on existing dictionaries, with conditional if statement."
  },
  "Set comprehension": {
    "prefix": "sc",
    "body": "{${1:value} for ${2:value} in ${3:iterable}}$0",
    "description": "Create a set based on existing iterables."
  },
  "Set Comprehension if filter": {
    "prefix": "sci",
    "body": "{${1:value} for ${2:value} in ${3:iterable} if ${4:condition}}$0",
    "description": "Create a set based on existing iterables, with condition if statement."
  },
  "Generator comprehension": {
    "prefix": "gc",
    "body": "(${1:key} for ${2:value} in ${3:iterable})$0",
    "description": "Create a generator based on existing iterables."
  },
  "Generator comprehension if filter": {
    "prefix": "gci",
    "body": "(${1:key} for ${2:value} in ${3:iterable} if ${4:condition})$0",
    "description": "Create a generator based on existing iterables, with condition if statement."
  },
  "lambda": {
    "prefix": "lambda",
    "body": [
      "lambda ${1:parameter_list}: ${2:expression}"
    ],
    "description": "lambda statement"
  },

  "pretty print object": {
    "prefix": "pp",
    "body": [
      "from flask import json",
      "\n",
      "json.dumps($1, indent=2)"
    ],
    "description": "pretty print an object"
  }
}
