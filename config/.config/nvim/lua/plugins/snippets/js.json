{
  "Log to the console": {
    "prefix": "log",
    "body": [
      "console.log($1)",
      "$0"
    ],
    "description": "Log to the console"
  },
  "Log warning to console": {
    "prefix": "warn",
    "body": [
      "console.warn($1)",
      "$0"
    ],
    "description": "Log warning to the console"
  },
  "Log error to console": {
    "prefix": "error",
    "body": [
      "console.error($1)",
      "$0"
    ],
    "description": "Log error to the console"
  },
  "Throw Exception": {
    "prefix": "throw",
    "body": [
      "throw \"$1\";",
      "$0"
    ],
    "description": "Throw Exception"
  },
  "Function Statement": {
    "prefix": "function",
    "body": [
      "function ${1:name}(${2:params}:${3:type}) {",
      "\t$0",
      "}"
    ],
    "description": "Function Statement"
  },
  "If Statement": {
    "prefix": "if",
    "body": [
      "if (${1:condition}) {",
      "\t$0",
      "}"
    ],
    "description": "If Statement"
  },
  "If-Else Statement": {
    "prefix": "ifelse",
    "body": [
      "if (${1:condition}) {",
      "\t$0",
      "} else {",
      "\t",
      "}"
    ],
    "description": "If-Else Statement"
  },
  "Switch Statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:key}) {",
      "\tcase ${2:value}:",
      "\t\t$0",
      "\t\tbreak;",
      "",
      "\tdefault:",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch Statement"
  },
  "Try-Catch Statement": {
    "prefix": "trycatch",
    "body": [
      "try {",
      "\t$0",
      "} catch (${1:error}) {",
      "\t",
      "}"
    ],
    "description": "Try-Catch Statement"
  },
  "map": {
    "prefix": "map",
    "body": "${1:iterable}.map((${2:item}) => {\n\t${0}\n})"
  },
  "reduce": {
    "prefix": "reduce",
    "body": "${1:iterable}.reduce((${2:previous}, ${3:current}) => {\n\t${0}\n}${4:, initial})"
  },
  "filter": {
    "prefix": "filter",
    "body": "${1:iterable}.filter((${2:item}) => {\n\t${0}\n})"
  },
  "find": {
    "prefix": "find",
    "body": "${1:iterable}.find((${2:item}) => {\n\t${0}\n})"
  },
  "every": {
    "prefix": "every",
    "body": "${1:iterable}.every((${2:item}) => {\n\t${0}\n})"
  },
  "some": {
    "prefix": "some",
    "body": "${1:iterable}.some((${2:item}) => {\n\t${0}\n})"
  },
  "let statement": {
    "prefix": "l",
    "body": "let ${1:name}"
  },
  "const statement": {
    "prefix": "c",
    "body": "const ${1:name}"
  },
  "const arrow function assignment": {
    "prefix": "cf",
    "body": "const ${1:name} = (${2:arguments}) => {\n\treturn ${0}\n}"
  },
  "arrow function": {
    "prefix": "af",
    "body": "(${1:arguments}) => ${2:statement}"
  },
  "Object.keys": {
    "prefix": "ok",
    "body": "Object.keys(${1:obj})"
  },
  "Object.values": {
    "prefix": "ov",
    "body": "Object.values(${1:obj})"
  },
  "Object.entries": {
    "prefix": "oe",
    "body": "Object.entries(${1:obj})"
  },
  "useState": {
    "prefix": "us",
    "body": "const [${1:setterName}, set${1:setterName}] = useState(${2:defVal})$0",
    "description": "use state hook"
  },
  "useEffect": {
    "prefix": "ue",
    "body": [
      "useEffect(() => {",
      "\t$1",
      "}, [${3:dependencies}])$0"
    ],
    "description": "React useEffect() hook"
  },
  "useEffect with return": {
    "prefix": "uer",
    "body": [
      "useEffect(() => {",
      "\t$1",
      "\n\treturn () => {",
      "\t\t$2",
      "\t}",
      "}, [${3:dependencies}])$0"
    ],
    "description": "React useEffect() hook with return statement"
  },
  "debugger": {
    "prefix": "debug",
    "body": ["\/\/ eslint-disable-next-line", "debugger"],
    "description": "debug"
  },
  "pretty print object": {
    "prefix": "pp",
    "body": "JSON.stringify($0, null, 2)",
    "description": "pretty print an object"
  }
}
