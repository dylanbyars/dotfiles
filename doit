#!/bin/bash
# ^ because I don't get good highlighting for zsh

PACKAGES=(jq yarn broot fzf ripgrep fd htop lazygit starship stow tmux zoxide tldr glow shfmt)
BIN_DIR=~/bin
APP_DIR=~/Applications
COMPLETIONS_DIR=~/.zsh

if [ ! -d "${BIN_DIR}" ]; then
  echo "mkdir -p $BIN_DIR"
  mkdir -p "${BIN_DIR}"
fi

if [ ! -d "${APP_DIR}" ]; then
  echo "mkdir -p $APP_DIR"
  mkdir -p "${APP_DIR}"
fi

install_packages__linux() {
  sudo apt update && apt install ripgrep fzf kitty tmux htop zoxide exa expect tldr snapd

  # get the content for tldr
  tldr --update

  # install snaps
  snap install glow shfmt
}

# More info here: https://brew.sh/
install_packages__mac() {

  brewfileInfo() {
    awk '
    BEGIN {lineType = ""}
    {if (lineType != $1) {
      lineType = $1
      description = ""
      if (lineType == "tap") {
        description = "(additional sources for packages)"
      } else if (lineType == "brew") {
        description = "(packages that you use on the command line)" 
      } else {
        description = "(GUI applications)" 
      }
      print $1,description;
    }}
    {gsub(/"|,/, ""); print "  -",$2}' $1
  }

  installPackages() {
    BREWFILE="./Brewfile"

    brewfileInfo $BREWFILE
    echo "\nDownloading required packages...\n"
    brew bundle install --file=$BREWFILE
  }

  # Do the thing
  if type brew >/dev/null; then
    echo "Homebrew installation found."
  else
    echo "Installing Homebrew..."
    curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh
  fi

  echo "Installing the following packages: \n"
  installPackages

  if [[ $? -ne 0 ]]; then
    echo "Something went wrong."
  fi
}

install_deno() {
  curl -fsSL https://deno.land/x/install/install.sh | sh
  # generate completions file and stick it in `~/.zsh`
  # WARN: this assumes that `~/.zsh` exists
  deno completions zsh >~/${COMPLETIONS_DIR}/_deno
}

install_go() {
  echo "eradicate old installations"
  sudo rm -rf /usr/local/go
  echo "download go"
  wget -c https://dl.google.com/go/go1.14.2.linux-amd64.tar.gz -O - | sudo tar --extract --ungzip -C /usr/local
  echo "it's working if you see a version number below"
  go version
  echo "set $GOBIN environment variable to install go packages to ~/bin"
  go env -w GOBIN="${APP_DIR}"
}

install_rust() {
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
  # install completions for `cargo`
  rustup completions zsh cargo >~/${COMPLETIONS_DIR}/_cargo

  # install stylua to format lua files
  cargo install stylua
}

install_broot() {
  # a directory browser
  cargo install broot
  # run `broot` command to have it make its own config file
  # NOTE: it will also try to add a line to `.zshrc` to source something. that's already taken care of.
  broot
}

install_neovim() {
  git -C $APP_DIT clone https://github.com/neovim/neovim && cd $APP_DIR/_neovim
  # `stable` is a tag so it'll checkout into detached head state
  git checkout stable

  echo "installing build dependencies"
  if [ "$(uname)" == "Darwin" ]; then
    echo "mac -> https://github.com/neovim/neovim/wiki/Building-Neovim#macos--homebrew"
    brew install ninja libtool automake cmake pkg-config gettext curl
  elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
    echo "linux -> https://github.com/neovim/neovim/wiki/Building-Neovim#ubuntu--debian"
    sudo apt update
    sudo apt install ninja-build gettext libtool libtool-bin autoconf automake cmake g++ pkg-config unzip curl doxygen
  fi

  echo "building neovim"
  make CMAKE_BUILD_TYPE=RelWithDebInfo
  sudo make install

  # if that didn't work, show some help
  if [[ $? -eq 1 ]]; then
    echo "Something went wrong. Check the docs -> https://github.com/neovim/neovim/wiki/Installing-Neovim#install-from-source"
  fi
}

uninstall_neovim() {
  sudo rm /usr/local/bin/nvim
  sudo rm -r /usr/local/share/nvim/
}

install_lazygit() {
  git -C $APP_DIR clone https://github.com/jesseduffield/lazygit.git && cd $APP_DIR/_lazygit
  # WARN: this assumes that `install_go` has run and set the GOBIN env var to `~/bin`
  go install
}

install_fonts() {
  fonts_dir="${HOME}/.local/share/fonts"

  if [ ! -d "${fonts_dir}" ]; then
    echo "mkdir -p $fonts_dir"
    mkdir -p "${fonts_dir}"
  else
    echo "Found fonts dir $fonts_dir"
  fi

  version=2.1.0
  zip=FiraCode.zip
  curl --fail --location --show-error https://github.com/ryanoasis/nerd-fonts/releases/download/v${version}/${zip} --output ${zip}
  unzip -o -q -d ${fonts_dir} ${zip}

  echo "fc-cache -f"
  fc-cache -f

  echo "restart the terminal to see the font in action"
}

set_default_terminal() {
  echo "set kitty as the default terminal"
  sudo update-alternatives --config x-terminal-emulator
}
